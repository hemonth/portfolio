<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Portfolio</title>
    <link>https://hemonth.github.io/portfolio/post/</link>
    <description>Recent content in Posts on Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Hemonth</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/portfolio/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Checklist required in building Java &#43; Angular/React App</title>
      <link>https://hemonth.github.io/portfolio/post/javaangularchecklist/</link>
      <pubDate>Thu, 10 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>https://hemonth.github.io/portfolio/post/javaangularchecklist/</guid>
      <description>

&lt;p&gt;I am sharing some useful checklist that are required in building java + angular/react applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Suggestions &amp;amp; Feedbacks are highly appreciated.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;initial-steps&#34;&gt;Initial steps&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Finalize tech stack&lt;/li&gt;
&lt;li&gt;Create a multi-module Maven or Gradle project. I recommend to start with two modules, one which contains front-end code like angular/react and back-end which contains java code.&lt;/li&gt;
&lt;li&gt;Use Maven or Gradle wrapper scripts so that there is no need to install Maven or Gradle on the machine before executing the build.&lt;/li&gt;
&lt;li&gt;Build project as a single jar/war file using a single command. If it is a maven project you should able to run &lt;code&gt;./mvnw clean install&lt;/code&gt; in the project root to build the executable.&lt;/li&gt;
&lt;li&gt;Set up a Continuous Integration server and make sure it can build the project as a single executable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;git-http-nvie-com-posts-a-successful-git-branching-model&#34;&gt;&lt;a href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt;&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Work on feature branches.&lt;/li&gt;
&lt;li&gt;Branch out from &lt;code&gt;develop&lt;/code&gt; branch.&lt;/li&gt;
&lt;li&gt;Never push to &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;develop&lt;/code&gt;. Make a pull request.&lt;/li&gt;
&lt;li&gt;Create pull request on the &lt;code&gt;develop&lt;/code&gt; and once it is tested then only merge to master. You can use different stratergy like merge to &lt;code&gt;master&lt;/code&gt; once sprint finishes.&lt;/li&gt;
&lt;li&gt;Delete local and remote branches after merging. You can automate this process as well.&lt;/li&gt;
&lt;li&gt;Before raising pull request, run the build locally and make sure all tests pass.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Protect your master branch.&lt;/li&gt;
&lt;li&gt;Never commit binary files to Git.&lt;/li&gt;
&lt;li&gt;Write meaningful Git commits messages. &lt;a href=&#34;https://chris.beams.io/posts/git-commit/&#34; target=&#34;_blank&#34;&gt;How to Write a Git Commit Message&amp;ndash; Chris Beams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Feature branches should be short lived.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Add a new dependencies to the project after discussing with the team.&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&#34;https://snyk.io/&#34; target=&#34;_blank&#34;&gt;Snyk&lt;/a&gt; to check security vulnerabilities.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t add dependency for each problem you face. First check if you already have some dependency that solves the problem.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;code-style&#34;&gt;Code style&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;For backend, use &lt;a href=&#34;http://checkstyle.sourceforge.net/&#34; target=&#34;_blank&#34;&gt;Checkstyle&lt;/a&gt; in your project. Make sure you it is integrated with the build.&lt;/li&gt;
&lt;li&gt;For frontend, use &lt;code&gt;ESLint&lt;/code&gt; or &lt;code&gt;TSLint&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ci-https-martinfowler-com-articles-continuousintegration-html&#34;&gt;&lt;a href=&#34;https://martinfowler.com/articles/continuousIntegration.html&#34; target=&#34;_blank&#34;&gt;CI&lt;/a&gt;&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Every code committed to version control system mainline should trigger a continuous integration job that runs on the integration server.&lt;/li&gt;
&lt;li&gt;Continuous integration job should build the project and run all unit test cases. It should happen on each code commit to mainline.&lt;/li&gt;
&lt;li&gt;Fix broken builds immediately. CI server should always be in healthy green state.&lt;/li&gt;
&lt;li&gt;Make CI server visible and transparent to whole team.&lt;/li&gt;
&lt;li&gt;Maintain build jobs as code use Jenkinsfile if you are using Jenkins.&lt;/li&gt;
&lt;li&gt;You should be able to create build jobs on a new CI server using code.&lt;/li&gt;
&lt;li&gt;Use pull request builder to build the project when pull request is raised.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;documentation-https-robots-thoughtbot-com-how-to-write-a-great-readme&#34;&gt;&lt;a href=&#34;https://robots.thoughtbot.com/how-to-write-a-great-readme&#34; target=&#34;_blank&#34;&gt;Documentation&lt;/a&gt;&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Create &lt;code&gt;README.md&lt;/code&gt; file in root of your project and keep it updated. The README file should have following&lt;/li&gt;
&lt;li&gt;Couple of lines describing purpose of the project.&lt;/li&gt;
&lt;li&gt;Instruction to grab the latest code and detailed instructions to build it.&lt;/li&gt;
&lt;li&gt;Instructions to run the project on local machine.&lt;/li&gt;
&lt;li&gt;Link to Continuous integration server.&lt;/li&gt;
&lt;li&gt;Instruction to do any setup required for the project.&lt;/li&gt;
&lt;li&gt;Instruction to grab project documentation.&lt;/li&gt;
&lt;li&gt;Any other relevant information that can help a new developer get started with the project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;testing&#34;&gt;Testing&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Write one automated functional test per user story.&lt;/li&gt;
&lt;li&gt;Cover business logic with unit/Integration tests.&lt;/li&gt;
&lt;li&gt;Understand different between unit testing and integration testing.&lt;/li&gt;
&lt;li&gt;Use consistent names for tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;naming&#34;&gt;Naming&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Think and discuss with team before choosing a name for public member.&lt;/li&gt;
&lt;li&gt;Java and JavaScript use &lt;code&gt;PascalCase&lt;/code&gt; for classes, interfaces, enums, annotations.&lt;/li&gt;
&lt;li&gt;Java and JavaScript use &lt;code&gt;camelCase&lt;/code&gt; for methods and variables.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;exception-handling&#34;&gt;Exception handling&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Catch any checked exception thrown by the code.&lt;/li&gt;
&lt;li&gt;Convert checked exceptions to unchecked exceptions.&lt;/li&gt;
&lt;li&gt;Throw the unchecked exception. Unchecked exceptions could be couston or plain RuntimeExeception.&lt;/li&gt;
&lt;li&gt;Always use two argument constructor of RuntimeException. The fist take a message, second is the actual exception.&lt;/li&gt;
&lt;li&gt;Catch all exceptions thrown by code in your controller and resource classes.&lt;/li&gt;
&lt;li&gt;Log exceptions only in the controller or resource classes.&lt;/li&gt;
&lt;li&gt;Log both the message and exception.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;rest-api-design&#34;&gt;Rest API Design&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;selection of resources is to analyze your business domain and extract the nouns that are relevant to your business needs.&lt;/li&gt;
&lt;li&gt;Do not use &lt;code&gt;GET&lt;/code&gt; for state changes.&lt;/li&gt;
&lt;li&gt;Do not mix up singular and plural nouns. Keep it simple and use only plural nouns for all resources.&lt;/li&gt;
&lt;li&gt;If a resource is related to another resource use subresources.&lt;/li&gt;
&lt;li&gt;Both client and server need to know which format is used for the communication. The format has to be specified in the HTTP-Header.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HATEOAS&lt;/code&gt; (&lt;strong&gt;Hypermedia as the Engine of Application State&lt;/strong&gt;) is used to create a better navigation through the API&amp;rsquo;s.&lt;/li&gt;
&lt;li&gt;Allow ascending and descending sorting over multiple fields.&lt;/li&gt;
&lt;li&gt;All exceptions should be mapped in an error payload.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;logging&#34;&gt;Logging&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Use slf4j for logging.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;code-review-https-www-atlassian-com-agile-code-reviews&#34;&gt;&lt;a href=&#34;https://www.atlassian.com/agile/code-reviews&#34; target=&#34;_blank&#34;&gt;Code Review&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Code reviews are about code not people. Don&amp;rsquo;t take code criticism personally.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are there any obvious logic errors in the code?&lt;/li&gt;
&lt;li&gt;Are unit tests written for the business logic?&lt;/li&gt;
&lt;li&gt;Does all the functional requirements met?&lt;/li&gt;
&lt;li&gt;Does the code conform to existing style guidelines?&lt;/li&gt;
&lt;li&gt;Propose better way to do certain tasks. It could be a library function that developer can use.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>jShell Introduction</title>
      <link>https://hemonth.github.io/portfolio/post/jshell/</link>
      <pubDate>Sat, 05 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>https://hemonth.github.io/portfolio/post/jshell/</guid>
      <description>

&lt;p&gt;One of the new coolest feature of java 9 is jShell. jShell / Project Kulla is the first official Java REPL (Read-Eval-Print-Loop), a command line tool that lets you run Java statements on their own without having to wrap them in classes or methods. We know scala and groovy already have this feature. Among the upcoming features of Java 9, it&amp;rsquo;s definitely going to be more interesting ones. To fire up and start playing with jshell we need to download jdk &amp;amp; jre 9 from &lt;a href=&#34;http://jdk.java.net/9/&#34; target=&#34;_blank&#34;&gt;http://jdk.java.net/9/&lt;/a&gt; . Once you are done with installation you need to setup JAVA_HOME as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;JAVA_HOME = C:\Program Files\Java\jdk-9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;once you are done setting the path variables open the command prompt and verify the java version&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -version
java version &amp;quot;9&amp;quot;
Java(TM) SE Runtime Environment (build 9+181)
Java HotSpot(TM) 64-Bit Server VM (build 9+181, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you see this, you can start using jShell by typing jShell on command prompt.&lt;/p&gt;

&lt;p&gt;Now lets see some of the cool features of jShell:&lt;/p&gt;

&lt;h1 id=&#34;expressions&#34;&gt;Expressions:&lt;/h1&gt;

&lt;p&gt;Simply just type any valid java expression it will return you the value.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jshell&amp;gt; 1+2
$1 ==&amp;gt; 3

jshell&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;default-imports&#34;&gt;Default Imports:&lt;/h1&gt;

&lt;p&gt;By default you will get a set of common imports&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jshell&amp;gt; /imports
|    import java.io.*
|    import java.math.*
|    import java.net.*
|    import java.nio.file.*
|    import java.util.*
|    import java.util.concurrent.*
|    import java.util.function.*
|    import java.util.prefs.*
|    import java.util.regex.*
|    import java.util.stream.*
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;jshell&amp;gt; Math.sqrt(16)
$2 ==&amp;gt; 4.0
jshell&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;variables&#34;&gt;Variables:&lt;/h1&gt;

&lt;p&gt;Declare variables and name them. Once you do that they become visible in scope.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jshell&amp;gt; int x=5
x ==&amp;gt; 5
jshell&amp;gt; int y=30
y ==&amp;gt; 30
jshell&amp;gt; int z=x+y
z ==&amp;gt; 35
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;methods&#34;&gt;Methods:&lt;/h1&gt;

&lt;p&gt;Define methods and even replace them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jshell&amp;gt; public void helloWorld(){ System.out.println(&amp;quot;Hello World!!&amp;quot;); }
|  created method helloWorld()

jshell&amp;gt; public void helloWorld(){ System.out.println(&amp;quot;Override method successful!!&amp;quot;); }
|  modified method helloWorld()

jshell&amp;gt; helloWorld()
Override method successful!!
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;commands&#34;&gt;Commands:&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;/help&lt;/code&gt; lists all the commands jShell provides. Some of the most useful once are:&lt;/p&gt;

&lt;h2 id=&#34;listing-variables&#34;&gt;Listing Variables&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;  jshell&amp;gt; /vars
  |    int $1 = 3
  |    double $2 = 4.0
  |    int x = 5
  |    int y = 30
  |    int z = 35
  jshell&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;listing-methods&#34;&gt;Listing Methods&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;  jshell&amp;gt; /methods
  |    void helloWorld()
  jshell&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;listing-sources&#34;&gt;Listing Sources&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;  jshell&amp;gt; /list
  1 : 1+2
  2 : Math.sqrt(16)
  10 : int x=5;
  11 : int y=30;
  12 : int z=x+y;
  14 : public void helloWorld(){ System.out.println(&amp;quot;Override method successful!!&amp;quot;); }
  15 : helloWorld()
  jshell&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;editing-sources-in-external-editor&#34;&gt;Editing Sources In External Editor&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;  jshell&amp;gt; /edit helloWorld
  |  modified method helloWorld()
  jshell&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/edit&lt;/code&gt; will bring up an jShell edit pad and allow user to edit.
[&lt;img src=&#34;https://www.packtpub.com/graphics/9781787282841/graphics/image_01_006.jpg&#34; alt=&#34;jShell Edit Pad&#34; /&gt;]()&lt;/p&gt;

&lt;h2 id=&#34;testing-java-niuanses&#34;&gt;Testing Java Niuanses&lt;/h2&gt;

&lt;p&gt;Comparing autoboxed integers references which values are from range -128 to 127 (inclusive) returns true (they are cached)? You can verify that with shell in a matter of seconds:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  jshell&amp;gt; Integer i=129
  i ==&amp;gt; 129
  jshell&amp;gt; Integer j=129
  j ==&amp;gt; 129
  jshell&amp;gt; i == j
  $28 ==&amp;gt; false
  jshell&amp;gt; Integer i=127
  i ==&amp;gt; 127
  jshell&amp;gt; Integer j=127
  j ==&amp;gt; 127
  jshell&amp;gt; i == j
  $31 ==&amp;gt; true
  jshell&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;repl-networking&#34;&gt;REPL Networking&lt;/h2&gt;

&lt;p&gt;With jShell we&amp;rsquo;re not confined to our machine and have networking access, this opens up some interesting opportunities. For instance, think about using it as a terminal to communicate with your server, connecting remotely and controlling some parameters from the outside. Another option would be querying your database, and the possibilities here are really endless.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jshell&amp;gt; URL url = new URL(&amp;quot;https://twitter.com/hemonthmandava&amp;quot;)
url ==&amp;gt; https://twitter.com/hemonthmandava

jshell&amp;gt; URLConnection connection = url.openConnection()
connection ==&amp;gt; sun.net.www.protocol.https.DelegateHttpsURLConnec ... twitter.com/hemonthmandava

jshell&amp;gt; connection.getHeaderFields()
$34 ==&amp;gt; {date=[Sat, 05 Aug 2017 23:52:30 GMT], null=[HTTP/1.1 200 OK], server=[tsa_b], x-ua-compatible=[IE=edge,chrome=1], expires=[Tue, 31 Mar 1981 05:00:00 GMT], x-response-time=[231], transfer-encoding=[chunked], x-frame-options=[SAMEORIGIN], x-transaction=[004281e90002c12f], strict-transport-security=[max-age=631138519], pragma=[no-cache], set-cookie=[ct0=d2178dc1826ab3f42a02c86296e05f21; Expires=Sun, 06 Aug 2017 05:52:30 UTC; Path=/; Domain=.twitter.com; Secure, guest_id=v1%3A150197715027179788; Expires=Mon, 05 Aug 2019 23:52:30 UTC; Path=/; Domain=.twitter.com, personalization_id=&amp;quot;v1_0YKziyiLVsomYk1ppqSf6w==&amp;quot;; Expires=Mon, 05 Aug 2019 23:52:30 UTC; Path=/; ... at, 05 Aug 2017 23:52:30 GMT], x-xss-protection=[1; mode=block], x-content-type-options=[nosniff], x-connection-hash=[99684d9ded1cc7abf5f1facfda4cee96], x-twitter-response-tags=[BouncerCompliant], content-type=[text/html;charset=utf-8], cache-control=[no-cache, no-store, must-revalidate, pre-check=0, post-check=0], status=[200 OK]}
jshell&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion:&lt;/h1&gt;

&lt;p&gt;JShell is a very useful tool for prototyping and testing Java code snippets. There is also a JShell Java api which allows you to evaluate JShell from java. Once the java 9 is out I bet there will be JShell integrations in most popualar IDEs - this will make using it even more handy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular 4 material design and animations introduction</title>
      <link>https://hemonth.github.io/portfolio/post/angular4materialdesign/</link>
      <pubDate>Thu, 20 Jul 2017 12:00:00 +0000</pubDate>
      
      <guid>https://hemonth.github.io/portfolio/post/angular4materialdesign/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Step 1: Install it through command line:&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-angular&#34;&gt;  npm install --save @angular/material @angular/animations.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Add below import statements in app.module&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  import { BrowserAnimationsModule } from &#39;@angular/platform-browser/animations&#39;;
  import { MdButtonModule, MdCardModule, MdMenuModule, MdToolbarModule, MdIconModule} from &#39;@angular/material&#39;;
  @NgModule({
  imports: [
   BrowserAnimationsModule,
   MdButtonModule,
   MdCardModule,
   MdMenuModule,
   MdToolbarModule,
   MdIconModule
  ],
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, you can create a separate NgModule that imports all of the Angular Material components that you will use in your application. You can then include this module wherever you&amp;rsquo;d like to use the components.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import { BrowserAnimationsModule } from &#39;@angular/platform-browser/animations&#39;;
import { MdButtonModule, MdCardModule, MdMenuModule, MdToolbarModule, MdIconModule} from &#39;@angular/material&#39;;

@NgModule({
    imports: [
    BrowserAnimationsModule,
    MdButtonModule,
    MdCardModule,
    MdMenuModule,
    MdToolbarModule,
    MdIconModule
  ],
  exports: [
    BrowserAnimationsModule,
    MdButtonModule,
    MdCardModule,
    MdMenuModule,
    MdToolbarModule,
    MdIconModule
  ],
})
export class MyOwnCustomMaterialModule { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whichever approach you use, be sure to import the Angular Material modules after Angular&amp;rsquo;s BrowserModule, as the import order matters for NgModules.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Include a theme&lt;/strong&gt;&lt;br&gt; Including a theme is &lt;strong&gt;required&lt;/strong&gt; to apply all of the core and theme styles to your application.&lt;br&gt;
  To get started with a prebuilt theme, include one of Angular Material&amp;rsquo;s prebuilt themes globally in your application. If you&amp;rsquo;re using the Angular CLI, you can add this to your &lt;code&gt;styles.css&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  @import &amp;quot;~@angular/material/prebuilt-themes/indigo-pink.css&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are not using the Angular CLI, you can include a prebuilt theme via a element in your &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Add Material Icons&lt;/strong&gt;&lt;br&gt; If you want to use the &lt;code&gt;md-icon&lt;/code&gt; component with the official Material Design Icons, load the icon font in your &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  &amp;lt;link href=&amp;quot;https://fonts.googleapis.com/icon?family=Material+Icons&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on using Material Icons, check out the &lt;a href=&#34;https://google.github.io/material-design-icons/&#34; target=&#34;_blank&#34;&gt;Material Icons Guide&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with the Academic framework for Hugo</title>
      <link>https://hemonth.github.io/portfolio/post/getting-started/</link>
      <pubDate>Wed, 20 Apr 2016 12:00:00 +0000</pubDate>
      
      <guid>https://hemonth.github.io/portfolio/post/getting-started/</guid>
      <description>

&lt;p&gt;The Academic framework enables you to easily create a beautifully simple personal or academic website using the &lt;a href=&#34;https://gohugo.io&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt; static site generator.&lt;/p&gt;

&lt;p&gt;Key features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easily manage your homepage, blog posts, publications, talks, and projects&lt;/li&gt;
&lt;li&gt;Configurable widgets available for Biography, Publications, Projects, News/Blog, Talks, and Contact&lt;/li&gt;
&lt;li&gt;Need a different section? Just use the Custom widget!&lt;/li&gt;
&lt;li&gt;Write in &lt;a href=&#34;&#34; target=&#34;_blank&#34;&gt;Markdown&lt;/a&gt; for easy formatting and code highlighting, with &lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX/Mathematics&#34; target=&#34;_blank&#34;&gt;LaTeX&lt;/a&gt; for mathematical expressions&lt;/li&gt;
&lt;li&gt;Social/academic network linking, &lt;a href=&#34;https://analytics.google.com&#34; target=&#34;_blank&#34;&gt;Google Analytics&lt;/a&gt;, and &lt;a href=&#34;https://disqus.com&#34; target=&#34;_blank&#34;&gt;Disqus&lt;/a&gt; comments&lt;/li&gt;
&lt;li&gt;Responsive and mobile friendly&lt;/li&gt;
&lt;li&gt;Simple and refreshing one page design&lt;/li&gt;
&lt;li&gt;Easy to customize&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://georgecushen.com/create-your-website-with-hugo/#installing-hugo&#34; target=&#34;_blank&#34;&gt;Install Hugo&lt;/a&gt; and create a new website by typing the following commands in your &lt;em&gt;Terminal&lt;/em&gt; or &lt;em&gt;Command Prompt&lt;/em&gt; app:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site my_website
cd my_website
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install Academic with &lt;a href=&#34;https://help.github.com/articles/set-up-git/&#34; target=&#34;_blank&#34;&gt;git&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/gcushen/hugo-academic.git themes/academic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or alternatively, &lt;a href=&#34;https://github.com/gcushen/hugo-academic/archive/master.zip&#34; target=&#34;_blank&#34;&gt;download Academic&lt;/a&gt; and extract it into a &lt;code&gt;themes/academic&lt;/code&gt; folder within your Hugo website.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you are creating a new website, copy the contents of the &lt;code&gt;exampleSite&lt;/code&gt; folder to your website root folder, overwriting existing files if necessary. The &lt;code&gt;exampleSite&lt;/code&gt; folder contains an example config file and content to help you get started.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp -av themes/academic/exampleSite/* .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start the Hugo server from your website root folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can go to &lt;a href=&#34;http://localhost:1313&#34; target=&#34;_blank&#34;&gt;localhost:1313&lt;/a&gt; and your new Academic powered website should appear.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Customize your website - refer to the &lt;em&gt;Getting Started&lt;/em&gt; section below&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build your site by running the &lt;code&gt;hugo&lt;/code&gt; command. Then &lt;a href=&#34;https://georgecushen.com/create-your-website-with-hugo/&#34; target=&#34;_blank&#34;&gt;host it for free using Github Pages&lt;/a&gt;. Or alternatively, copy the generated &lt;code&gt;public/&lt;/code&gt; directory (by FTP, Rsync, etc.) to your production web server (such as your university&amp;rsquo;s hosting service).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Assuming you created a new website with the example content following the installation steps above, this section explores just a few more steps in order to customize it.&lt;/p&gt;

&lt;h3 id=&#34;core-parameters&#34;&gt;Core parameters&lt;/h3&gt;

&lt;p&gt;The core parameters for the website can be edited in the &lt;code&gt;config.toml&lt;/code&gt; configuration file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set &lt;code&gt;baseurl&lt;/code&gt; to your website URL (we recommend &lt;a href=&#34;https://georgecushen.com/create-your-website-with-hugo/&#34; target=&#34;_blank&#34;&gt;GitHub Pages&lt;/a&gt; for free hosting)&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;title&lt;/code&gt; to your desired website title such as your name&lt;/li&gt;
&lt;li&gt;The example Disqus commenting variable should be cleared (e.g. &lt;code&gt;disqusShortname = &amp;quot;&amp;quot;&lt;/code&gt;) or set to your own &lt;a href=&#34;https://disqus.com/&#34; target=&#34;_blank&#34;&gt;Disqus&lt;/a&gt; shortname to enable commenting&lt;/li&gt;
&lt;li&gt;Edit your details under &lt;code&gt;[params]&lt;/code&gt;; these will be displayed mainly in the homepage &lt;em&gt;about&lt;/em&gt; and &lt;em&gt;contact&lt;/em&gt; widgets (if used). To disable a contact field, simply clear the value to &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Place a square cropped portrait photo named &lt;code&gt;portrait.jpg&lt;/code&gt; into the &lt;code&gt;static/img/&lt;/code&gt; folder, overwriting any defaults. Alternatively, you can edit the &lt;code&gt;avatar&lt;/code&gt; filepath to point to a different image name or clear the value to disable the avatar feature.&lt;/li&gt;
&lt;li&gt;To enable LaTeX math for your site, set &lt;code&gt;math = true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Social/academic networking links are defined as multiples of &lt;code&gt;[[params.social]]&lt;/code&gt;. They can be created or deleted as necessary.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;introduce-yourself&#34;&gt;Introduce yourself&lt;/h3&gt;

&lt;p&gt;Edit your biography in the &lt;em&gt;about&lt;/em&gt; widget &lt;code&gt;content/home/about.md&lt;/code&gt; that you copied across from the &lt;code&gt;themes/academic/exampleSite/&lt;/code&gt; folder. The research interests and qualifications are stored as &lt;code&gt;interests&lt;/code&gt; and &lt;code&gt;education&lt;/code&gt; variables. The academic qualifications are defined as multiples of &lt;code&gt;[[education.courses]]&lt;/code&gt; and can be created or deleted as necessary. It&amp;rsquo;s possible to completely hide the interests and education lists by deleting their respective variables.&lt;/p&gt;

&lt;h3 id=&#34;customize-the-homepage&#34;&gt;Customize the homepage&lt;/h3&gt;

&lt;p&gt;Refer to our guide on using &lt;a href=&#34;https://hemonth.github.io/portfolio/post/widgets/&#34; target=&#34;_blank&#34;&gt;widgets&lt;/a&gt; to customize your homepage.&lt;/p&gt;

&lt;h3 id=&#34;add-your-content&#34;&gt;Add your content&lt;/h3&gt;

&lt;p&gt;Refer to our guide on &lt;a href=&#34;&#34; target=&#34;_blank&#34;&gt;managing content&lt;/a&gt; to create your own publications, blog posts, talks, and projects.&lt;/p&gt;

&lt;h3 id=&#34;remove-unused-widgets-and-pages&#34;&gt;Remove unused widgets and pages&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;&#34; target=&#34;_blank&#34;&gt;How to remove unused widgets and content pages&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;customization-upgrading&#34;&gt;Customization &amp;amp; Upgrading&lt;/h3&gt;

&lt;p&gt;Continue reading below for advanced customization tips and instructions for keeping the framework up-to-date with any improvements that become available.&lt;/p&gt;

&lt;h2 id=&#34;advanced-customization&#34;&gt;Advanced customization&lt;/h2&gt;

&lt;p&gt;It is possible to carry out many customizations without touching any files in &lt;code&gt;themes/academic&lt;/code&gt;, making it easier to upgrade the framework in the future.&lt;/p&gt;

&lt;h3 id=&#34;navigation-menu&#34;&gt;Navigation menu&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;[[menu.main]]&lt;/code&gt; entries towards the bottom of &lt;code&gt;config.toml&lt;/code&gt; define the navigation links at the top of the website. They can be added or removed as desired.&lt;/p&gt;

&lt;p&gt;To create a dropdown sub-menu, add &lt;code&gt;identifier = &amp;quot;something&amp;quot;&lt;/code&gt; to the parent item and &lt;code&gt;parent = &amp;quot;something&amp;quot;&lt;/code&gt; to the child item.&lt;/p&gt;

&lt;h3 id=&#34;website-icon&#34;&gt;Website icon&lt;/h3&gt;

&lt;p&gt;Save your main icon and mobile icon as square PNG images named &lt;code&gt;icon.png&lt;/code&gt; and &lt;code&gt;apple-touch-icon.png&lt;/code&gt;, respectively. Place them in your root &lt;code&gt;static/img/&lt;/code&gt; folder.&lt;/p&gt;

&lt;h3 id=&#34;theme-color-css&#34;&gt;Theme color (CSS)&lt;/h3&gt;

&lt;p&gt;You can link custom CSS assets (relative to your root &lt;code&gt;static/css&lt;/code&gt;) from your &lt;code&gt;config.toml&lt;/code&gt; using &lt;code&gt;custom_css = [&amp;quot;custom.css&amp;quot;]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, lets make a green theme. First, define &lt;code&gt;custom_css = [&amp;quot;green.css&amp;quot;]&lt;/code&gt; in &lt;code&gt;config.toml&lt;/code&gt;. Then we can download the example &lt;a href=&#34;https://gist.github.com/gcushen/d5525a4506b9ccf83f2bce592a895495&#34; target=&#34;_blank&#34;&gt;green theme&lt;/a&gt; and save it as &lt;code&gt;static/css/green.css&lt;/code&gt;, relative to your website root (i.e. &lt;strong&gt;not&lt;/strong&gt; in the &lt;code&gt;themes&lt;/code&gt; directory).&lt;/p&gt;

&lt;h3 id=&#34;analytics&#34;&gt;Analytics&lt;/h3&gt;

&lt;p&gt;To enable &lt;a href=&#34;http://www.google.com/analytics&#34; target=&#34;_blank&#34;&gt;Google Analytics&lt;/a&gt;, add your tracking code in &lt;code&gt;config.toml&lt;/code&gt; similarly to &lt;code&gt;googleAnalytics = &amp;quot;UA-12345678-9&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;third-party-and-local-scripts-js&#34;&gt;Third party and local scripts (JS)&lt;/h3&gt;

&lt;p&gt;To add a third party script, create a file named &lt;code&gt;head_custom.html&lt;/code&gt; in a &lt;code&gt;layouts/partials/&lt;/code&gt; folder at the root of your website (not in the &lt;code&gt;themes&lt;/code&gt; folder). Any HTML code added to this file will be included within your website&amp;rsquo;s &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;. Therefore, it&amp;rsquo;s suitable for adding custom metadata or third party scripts specified with the &lt;em&gt;async&lt;/em&gt; attribute.&lt;/p&gt;

&lt;p&gt;Whereas for your own local scripts, you can link your local JS assets (relative to your root &lt;code&gt;static/js&lt;/code&gt;) from your &lt;code&gt;config.toml&lt;/code&gt; using &lt;code&gt;custom_js  = [&amp;quot;custom.js&amp;quot;]&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;language-and-translation&#34;&gt;Language and translation&lt;/h3&gt;

&lt;p&gt;The interface text (e.g. buttons) is stored in language files which are collected from Academic&amp;rsquo;s &lt;code&gt;themes/academic/i18n/&lt;/code&gt; folder, as well as an &lt;code&gt;i18n/&lt;/code&gt; folder at the root of your project.&lt;/p&gt;

&lt;p&gt;To edit the interface text, copy &lt;code&gt;themes/academic/i18n/en.yaml&lt;/code&gt; to &lt;code&gt;i18n/en.yaml&lt;/code&gt; (relative to the root of your website). Open the new file and make any desired changes to the text appearing after &lt;code&gt;translation:&lt;/code&gt;. Note that the language files are formatted in YAML syntax.&lt;/p&gt;

&lt;p&gt;To translate the interface text to another language, follow the above instructions, but name the new file in the form &lt;code&gt;i18n/X.yaml&lt;/code&gt; where &lt;code&gt;X&lt;/code&gt; is the appropriate &lt;a href=&#34;http://www.w3schools.com/tags/ref_language_codes.asp&#34; target=&#34;_blank&#34;&gt;ISO/RFC5646 language identifier&lt;/a&gt; for the translation. Then follow the brief instructions in the &lt;em&gt;Language&lt;/em&gt; section at the bottom of your &lt;code&gt;config.toml&lt;/code&gt;. To change the default language used by Academic, set &lt;code&gt;defaultContentLanguage&lt;/code&gt; to the desired language identifier in your configuration file.&lt;/p&gt;

&lt;p&gt;To translate the navigation bar, you can edit the default &lt;code&gt;[[menu.main]]&lt;/code&gt; instances in &lt;code&gt;config.toml&lt;/code&gt;. However, for a multilingual site, you will need to duplicate all of the &lt;code&gt;[[menu.main]]&lt;/code&gt; instances and rename the new instances from &lt;code&gt;[[menu.main]]&lt;/code&gt; to &lt;code&gt;[[languages.X.menu.main]]&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is the language identifier (e.g. &lt;code&gt;[[languages.zh.menu.main]]&lt;/code&gt; for Simplified Chinese). Thus, the navigation bar can be displayed in multiple languages.&lt;/p&gt;

&lt;p&gt;To translate a content file in your &lt;code&gt;content/&lt;/code&gt; folder into another language, copy the file to &lt;code&gt;filename.X.md&lt;/code&gt; where &lt;code&gt;filename&lt;/code&gt; is your existing filename and &lt;code&gt;X&lt;/code&gt; is the appropriate &lt;a href=&#34;http://www.w3schools.com/tags/ref_language_codes.asp&#34; target=&#34;_blank&#34;&gt;ISO/RFC5646 language identifier&lt;/a&gt; for the translation. Then translate the content in the new file to the specified language.&lt;/p&gt;

&lt;p&gt;For further details on Hugo&amp;rsquo;s internationalization and multilingual features, refer to the &lt;a href=&#34;https://gohugo.io/content/multilingual/&#34; target=&#34;_blank&#34;&gt;associated Hugo documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;permalinks&#34;&gt;Permalinks&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Permalinks&lt;/em&gt;, or &lt;em&gt;permanent links&lt;/em&gt;, are URLs to individual pages and posts on your website. They are permanent web addresses which can be used to link to your content. Using Hugo&amp;rsquo;s &lt;em&gt;permalinks&lt;/em&gt; option these can be easily customized. For example, the blog post URL can be changed to the form &lt;em&gt;yourURL/2016/05/01/my-post-slug&lt;/em&gt; by adding the following near the top of your &lt;code&gt;config.toml&lt;/code&gt; (before &lt;code&gt;[params]&lt;/code&gt; settings):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[permalinks]
    post = &amp;quot;/:year/:month/:day/:slug&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;:slug&lt;/code&gt; defaults to the filename of the post, excluding the file extension. However, slug may be overridden on a per post basis if desired, simply by setting &lt;code&gt;slug = &amp;quot;my-short-post-title&amp;quot;&lt;/code&gt; in your post preamble.&lt;/p&gt;

&lt;h2 id=&#34;upgrading&#34;&gt;Upgrading&lt;/h2&gt;

&lt;p&gt;Feel free to &lt;em&gt;star&lt;/em&gt; the project on &lt;a href=&#34;https://github.com/gcushen/hugo-academic/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt; and monitor the &lt;a href=&#34;https://github.com/gcushen/hugo-academic/commits/master&#34; target=&#34;_blank&#34;&gt;commits&lt;/a&gt; for updates.&lt;/p&gt;

&lt;p&gt;Before upgrading the framework, it is recommended to make a backup of your entire website directory, or at least your &lt;code&gt;themes/academic&lt;/code&gt; directory. You can also read about the &lt;a href=&#34;https://github.com/gcushen/hugo-academic/releases&#34; target=&#34;_blank&#34;&gt;most recent milestones&lt;/a&gt; (but this doesn&amp;rsquo;t necessarily reflect the latest &lt;em&gt;master&lt;/em&gt; release).&lt;/p&gt;

&lt;p&gt;Before upgrading for the first time, the remote &lt;em&gt;origin&lt;/em&gt; repository should be renamed to &lt;em&gt;upstream&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd themes/academic
$ git remote rename origin upstream
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To list available updates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd themes/academic
$ git fetch upstream
$ git log --pretty=oneline --abbrev-commit --decorate HEAD..upstream/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, upgrade by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git pull upstream
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have modified files in &lt;code&gt;themes/academic&lt;/code&gt;, git will attempt to auto-merge changes. If conflicts are reported, you will need to manually edit the files with conflicts and add them back (&lt;code&gt;git add &amp;lt;filename&amp;gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If there are any issues after upgrading, you may wish to compare your site with the latest &lt;a href=&#34;https://github.com/gcushen/hugo-academic/tree/master/exampleSite&#34; target=&#34;_blank&#34;&gt;example site&lt;/a&gt; to check if any settings changed.&lt;/p&gt;

&lt;h2 id=&#34;feedback-contributing&#34;&gt;Feedback &amp;amp; Contributing&lt;/h2&gt;

&lt;p&gt;Please use the &lt;a href=&#34;https://github.com/gcushen/hugo-academic/issues&#34; target=&#34;_blank&#34;&gt;issue tracker&lt;/a&gt; to let me know about any bugs or feature requests, or alternatively make a pull request.&lt;/p&gt;

&lt;p&gt;For general questions about Hugo, there is a &lt;a href=&#34;http://discuss.gohugo.io&#34; target=&#34;_blank&#34;&gt;Hugo discussion forum&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;Copyright 2016 &lt;a href=&#34;https://georgecushen.com&#34; target=&#34;_blank&#34;&gt;George Cushen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/gcushen/hugo-academic/blob/master/LICENSE.md&#34; target=&#34;_blank&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Customizing the homepage with widgets</title>
      <link>https://hemonth.github.io/portfolio/post/widgets/</link>
      <pubDate>Wed, 20 Apr 2016 11:00:00 +0000</pubDate>
      
      <guid>https://hemonth.github.io/portfolio/post/widgets/</guid>
      <description>

&lt;p&gt;Homepage widgets display as sections on the homepage. They can be enabled/disabled and configured as desired. Academic has the following widgets available to use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;About/biography&lt;/li&gt;
&lt;li&gt;Selected publications&lt;/li&gt;
&lt;li&gt;Recent publications&lt;/li&gt;
&lt;li&gt;Recent news/blog posts&lt;/li&gt;
&lt;li&gt;Projects&lt;/li&gt;
&lt;li&gt;Selected talks&lt;/li&gt;
&lt;li&gt;Recent talks&lt;/li&gt;
&lt;li&gt;Contact&lt;/li&gt;
&lt;li&gt;Custom widget (demonstrated with the &lt;em&gt;teaching&lt;/em&gt; example)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The example site that you copied to create your site uses all the different types of widget (except talks), so you can generally just delete the widgets you don&amp;rsquo;t need and customize the parameters of the widgets you wish to keep.&lt;/p&gt;

&lt;p&gt;The parameters for each widget vary. They can be found in the preamble/frontmatter (between the pair of &lt;code&gt;+++&lt;/code&gt;) for each widget installed in the &lt;code&gt;content/home/&lt;/code&gt; folder.&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;By default, publications will be displayed in a simple list. If you prefer a more detailed list with abstract and image, you can enable the detailed publication list on the homepage by setting &lt;code&gt;detailed_list = true&lt;/code&gt; in &lt;code&gt;content/home/publications.md&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;


&lt;h2 id=&#34;add-a-widget-to-the-homepage&#34;&gt;Add a widget to the homepage&lt;/h2&gt;

&lt;p&gt;To add a widget manually, copy the relevant widget from &lt;code&gt;themes/academic/exampleSite/content/home/&lt;/code&gt; to your &lt;code&gt;content/home/&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Widget identifiers are set to their respective filenames, so a &lt;code&gt;content/home/about.md&lt;/code&gt; widget can be linked from the navigation bar by setting the relevant URL as &lt;code&gt;&amp;quot;#about&amp;quot;&lt;/code&gt; in &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This means that if you want to use multiple instances of a widget, each widget will be assigned a unique ID based on the filename that you set. You can then use that ID for linking, like in the above example.&lt;/p&gt;

&lt;h2 id=&#34;using-the-custom-widget&#34;&gt;Using the custom widget&lt;/h2&gt;

&lt;p&gt;You can use the custom widget to create your own home page sections.&lt;/p&gt;

&lt;p&gt;Simply duplicate (copy/paste) and rename the example &lt;em&gt;teaching&lt;/em&gt; file at &lt;code&gt;content/home/teaching.md&lt;/code&gt;. Then edit the section title, weight (refer to &lt;em&gt;Ordering sections&lt;/em&gt; below), and content as desired.&lt;/p&gt;

&lt;p&gt;You may also wish to add a navigation link to the top of the page that points to the new section. This can be achieved by adding something similar to the following lines to your &lt;code&gt;config.toml&lt;/code&gt;, where the URL will consist of the first title word in lowercase:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[menu.main]]
    name = &amp;quot;Research&amp;quot;
    url = &amp;quot;#research&amp;quot;
    weight = 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;remove-a-widget-from-the-homepage&#34;&gt;Remove a widget from the homepage&lt;/h2&gt;

&lt;p&gt;If you do not require a particular widget, you can simply delete any associated files from the &lt;code&gt;content/home/&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;To remove a navigation link from the top of the page, remove the associated &lt;code&gt;[[menu.main]]&lt;/code&gt; entry in &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;ordering-widgets&#34;&gt;Ordering widgets&lt;/h2&gt;

&lt;p&gt;The order that the homepage widgets are displayed in is defined by the &lt;code&gt;weight&lt;/code&gt; parameter in each of the files in the &lt;code&gt;content/home/&lt;/code&gt; directory. The widgets are displayed in ascending order of their &lt;code&gt;weight&lt;/code&gt;, so you can simply edit the &lt;code&gt;weight&lt;/code&gt; parameters as desired.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
